// This is a dynamic version of the IEEE 123 Node Test System

clock {
	timezone "PST+8PDT";
	starttime '2001-08-01 12:00:00 PST';
	stoptime '2001-08-01 12:03:00 PST';
}

#set suppress_repeat_messages=1
#set relax_naming_rules=1;
#set profiler=1
#set pauseatexit=1
#define rotor_convergence=0.00000000000001
#set double_format=%+.12lg
#set complex_format=%+.12lg%+.12lg%c
#set complex_output_format=POLAR_DEG

//Deltamode declarations - global values
#set deltamode_timestep=100000000		//100 ms
#set deltamode_maximumtime=180000000000	//3 minute
#set deltamode_iteration_limit=10		//Iteration limit
#set maximum_synctime=6400


module tape;
module reliability {
	enable_subsecond_models true;
	maximum_event_length 1800000;	//Maximum length of events in seconds (manual events are excluded from this limit)
	report_event_log false;
}

module powerflow {
	enable_subsecond_models true;
	deltamode_timestep 1 ms;	//10 ms
	solver_method NR;
	all_powerflow_delta true;
	lu_solver "KLU";
	line_capacitance true;
	//enable_inrush TRUE;
};

module connection;
object helics_msg {
    name GLD;
    message_type JSON;
    publish_period 1;
    configure "config/gridlabd_config.json";
}

module generators {
	enable_subsecond_models true;
	deltamode_timestep 1 ms;
}

 module climate;

object climate {
     name "WA-Yakima";
     tmyfile "WA-Yakima.tmy2";
	 interpolate NONE;
};


// DG #1 At source node
object diesel_dg {
    flags DELTAMODE;
	name Gen1;
	parent node_150;
	Rated_V 4156; //Line-to-Line value
	Rated_VA 10000000; // Defaults to 10 MVA
	overload_limit 1.00;
	power_out_A 30000+3000j;
	power_out_B 30000+3000j;
	power_out_C 30000+3000j;
	Gen_type DYN_SYNCHRONOUS;
	rotor_speed_convergence ${rotor_convergence};
	inertia 0.553286;
	damping 0.0;
	Ra .006543;
	Ta 0.05;
	Xl 0.066;
	Xd 1.77;
	Xq 1.052;
	Xdp 0.128;
	Xqp 0.2232003883;
	Xdpp 0.107;
	Xqpp 0.189;
	Tdop 1.748986;
	Tqop 0.448458;
	Tdopp 0.017013;
	Tqopp 0.016817;
	
    Exciter_type SEXS;
	TA 0.01;
	TB 0.02;
	TC 0.08;	
    KA 50;
	Vset 1.0;


	Governor_type GGOV1;
	
	//Toggle low-value-select items
	GGOV1_Load_Limit_enable false;
	GGOV1_Acceleration_Limit_enable false;
	GGOV1_PID_enable true;
	
	// //Default properties:
	GGOV1_R 0.03; // Permanent droop, p.u.
	GGOV1_Rselect 0; // Feedback signal for droop, = 1 selected electrical power, = 0 none (isochronous governor), = -1 fuel valve stroke ( true stroke),= -2 governor output ( requested stroke)
	
	//GGOV1_Rselect 1; // Feedback signal for droop, = 1 selected electrical power, = 0 none (isochronous governor), = -1 fuel valve stroke ( true stroke),= -2 governor output ( requested stroke)
	GGOV1_Tpelec 1.0; // Electrical power transducer time constant, sec. (>0.)
	GGOV1_maxerr 0.05;//0.05; // Maximum value for speed error signal
	GGOV1_minerr -0.05;//-0.05; // Minimum value for speed error signal
	GGOV1_Kpgov 2.5;// 0.8; // Governor proportional gain
	GGOV1_Kigov 6.5;// 0.2; // Governor integral gain
	GGOV1_Kdgov 0.0; // Governor derivative gain
	GGOV1_Tdgov 1.0; // Governor derivative controller time constant, sec.
	GGOV1_vmax 1.0;//1.0; // Maximum valve position limit
	GGOV1_vmin 0.15; // Minimum valve position limit
	GGOV1_Tact 0.05;//0.5; // Actuator time constant
	GGOV1_Kturb 1.5; // Turbine gain (>0.)
	GGOV1_wfnl 0.2;//0.2; // No load fuel flow, p.u
	GGOV1_Tb 0.01;//0.1; // Turbine lag time constant, sec. (>0.)
	GGOV1_Tc 0.2; // Turbine lead time constant, sec.
	GGOV1_Fuel_lag 1; // Switch for fuel source characteristic, = 0 for fuel flow independent of speed, = 1 fuel flow proportional to speed
	GGOV1_Teng 0.0; // Transport lag time constant for diesel engine
	GGOV1_Tfload 3.0; // Load Limiter time constant, sec. (>0.)
	GGOV1_Kpload 2.0; // Load limiter proportional gain for PI controller
	GGOV1_Kiload 0.67; // Load limiter integral gain for PI controller
	GGOV1_Ldref 1.0; // Load limiter reference value p.u.
	GGOV1_Dm 0.0; // Speed sensitivity coefficient, p.u.
	GGOV1_ropen 050; // Maximum valve opening rate, p.u./sec.
	GGOV1_rclose -050; // Minimum valve closing rate, p.u./sec.
	GGOV1_Kimw 0.0;//0.002; // Power controller (reset) gain
	GGOV1_Pmwset 3.0; // Power controller setpoint, MW
	GGOV1_aset 0.01; // Acceleration limiter setpoint, p.u./sec.
	GGOV1_Ka 10.0; // Acceleration limiter Gain
	GGOV1_Ta 0.1; // Acceleration limiter time constant, sec. (>0.)
	GGOV1_db 0.0; // Speed governor dead band
	GGOV1_Tsa 4.0; // Temperature detection lead time constant, sec.
	GGOV1_Tsb 5.0; // Temperature detection lag time constant, sec.
	

}






// DG #2 
object diesel_dg {
    flags DELTAMODE;
	name Gen2;
	parent load_50;
	Rated_V 4156; //Line-to-Line value
	Rated_VA 1000000; // Defaults to 10 MVA
	overload_limit 1.00;
	power_out_A 25000+8333j;//75000+25000j;
	power_out_B 25000+8333j;//75000+25000j;
	power_out_C 25000+8333j;//75000+25000j;
	Gen_type DYN_SYNCHRONOUS;
	rotor_speed_convergence ${rotor_convergence};
	inertia 0.553286;
	damping 0.0;
	Ra .006543;
	Ta 0.05;
	Xl 0.066;
	Xd 1.77;
	Xq 1.052;
	Xdp 0.128;
	Xqp 0.2232003883;
	Xdpp 0.107;
	Xqpp 0.189;
	Tdop 1.748986;
	Tqop 0.448458;
	Tdopp 0.017013;
	Tqopp 0.016817;
	
	Exciter_type SEXS;
	SEXS_mode Q_V_DROOP;
	SEXS_Q_V_droop 0.05;
	TA 0.01;
	TB 0.02;
	TC 0.08;	
    KA 50;
	Vset 1.0;


	Governor_type GGOV1;
	
	//Toggle low-value-select items
	GGOV1_Load_Limit_enable false;
	GGOV1_Acceleration_Limit_enable false;
	GGOV1_PID_enable true;
	
	// //Default properties:
	GGOV1_R 0.03; // Permanent droop, p.u.
	GGOV1_Rselect 1; // Feedback signal for droop, = 1 selected electrical power, = 0 none (isochronous governor), = -1 fuel valve stroke ( true stroke),= -2 governor output ( requested stroke)
	
	//GGOV1_Rselect 1; // Feedback signal for droop, = 1 selected electrical power, = 0 none (isochronous governor), = -1 fuel valve stroke ( true stroke),= -2 governor output ( requested stroke)
	GGOV1_Tpelec 1.0; // Electrical power transducer time constant, sec. (>0.)
	GGOV1_maxerr 0.05;//0.05; // Maximum value for speed error signal
	GGOV1_minerr -0.05;//-0.05; // Minimum value for speed error signal
	GGOV1_Kpgov 2.5;// 0.8; // Governor proportional gain
	GGOV1_Kigov 6.5;// 0.2; // Governor integral gain
	GGOV1_Kdgov 0.0; // Governor derivative gain
	GGOV1_Tdgov 1.0; // Governor derivative controller time constant, sec.
	GGOV1_vmax 1.0;//1.0; // Maximum valve position limit
	GGOV1_vmin 0.15; // Minimum valve position limit
	GGOV1_Tact 0.05;//0.5; // Actuator time constant
	GGOV1_Kturb 1.5; // Turbine gain (>0.)
	GGOV1_wfnl 0.2;//0.2; // No load fuel flow, p.u
	GGOV1_Tb 0.01;//0.1; // Turbine lag time constant, sec. (>0.)
	GGOV1_Tc 0.2; // Turbine lead time constant, sec.
	GGOV1_Fuel_lag 1; // Switch for fuel source characteristic, = 0 for fuel flow independent of speed, = 1 fuel flow proportional to speed
	GGOV1_Teng 0.0; // Transport lag time constant for diesel engine
	GGOV1_Tfload 3.0; // Load Limiter time constant, sec. (>0.)
	GGOV1_Kpload 2.0; // Load limiter proportional gain for PI controller
	GGOV1_Kiload 0.67; // Load limiter integral gain for PI controller
	GGOV1_Ldref 1.0; // Load limiter reference value p.u.
	GGOV1_Dm 0.0; // Speed sensitivity coefficient, p.u.
	GGOV1_ropen 050; // Maximum valve opening rate, p.u./sec.
	GGOV1_rclose -050; // Minimum valve closing rate, p.u./sec.
	GGOV1_Kimw 0.0;//0.002; // Power controller (reset) gain
	GGOV1_Pmwset 3.0; // Power controller setpoint, MW
	GGOV1_aset 0.01; // Acceleration limiter setpoint, p.u./sec.
	GGOV1_Ka 10.0; // Acceleration limiter Gain
	GGOV1_Ta 0.1; // Acceleration limiter time constant, sec. (>0.)
	GGOV1_db 0.0; // Speed governor dead band
	GGOV1_Tsa 4.0; // Temperature detection lead time constant, sec.
	GGOV1_Tsb 5.0; // Temperature detection lag time constant, sec.
	
}


// DG #3 /////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

object diesel_dg {
    flags DELTAMODE;
	name Gen3;
	parent load_100; //node_1001;
	Rated_V 4156; //Line-to-Line value
	Rated_VA 450000; // 300000 for ring //150000; // 450000// Defaults to 10 MVA
	overload_limit 1.00;
	power_out_A 50000+16667j; //20000+16667j; // 50000
	power_out_B 50000+16667j; //20000+16667j; // 50000
	power_out_C 50000+16667j; //20000+16667j; // 50000
	Gen_type DYN_SYNCHRONOUS;
	rotor_speed_convergence ${rotor_convergence};
	inertia 0.553286;
	damping 0;
	Ra .006543;
	Ta 0.06;
	Xl 0.016;
	Xd 1.67;
	Xq 1.082;
	Xdp 0.148;
	Xqp 0.2432003883;
	Xdpp 0.107;
	Xqpp 0.189;
	Tdop 1.748986;
	Tqop 0.448458;
	Tdopp 0.017013;
	Tqopp 0.016817;
	
	Exciter_type SEXS;
	SEXS_mode Q_V_DROOP;
	SEXS_Q_V_droop 0.05;
	TA 0.01;
	TB 0.03;
	TC 0.07;	
    KA 45;
	Vset 1.0;
        // Qref 2.0;
	// was 1.0
	Governor_type GGOV1;
	// Governor_type DEGOV1;

	//Toggle low-value-select items
	GGOV1_Load_Limit_enable false;
	GGOV1_Acceleration_Limit_enable false;
	GGOV1_PID_enable true;
	P_f_droop_setting_mode PSET_MODE;
	
	// //Default properties:
	GGOV1_R 0.03; // Permanent droop, p.u.
	GGOV1_Rselect 1; // Feedback signal for droop, = 1 selected electrical power, = 0 none (isochronous governor), = -1 fuel valve stroke ( true stroke),= -2 governor output ( requested stroke)
	
	//GGOV1_Rselect 1; // Feedback signal for droop, = 1 selected electrical power, = 0 none (isochronous governor), = -1 fuel valve stroke ( true stroke),= -2 governor output ( requested stroke)
	GGOV1_Tpelec 1.0; // Electrical power transducer time constant, sec. (>0.)
	GGOV1_maxerr 0.05;//0.05; // Maximum value for speed error signal
	GGOV1_minerr -0.05;//-0.05; // Minimum value for speed error signal
	GGOV1_Kpgov 2.5;// 0.8; // Governor proportional gain
	GGOV1_Kigov 6.5;// 0.2; // Governor integral gain
	GGOV1_Kdgov 0.0; // Governor derivative gain
	GGOV1_Tdgov 1.0; // Governor derivative controller time constant, sec.
	GGOV1_vmax 1.0;//1.0; // Maximum valve position limit
	GGOV1_vmin 0.15; // Minimum valve position limit
	GGOV1_Tact 0.05;//0.5; // Actuator time constant
	GGOV1_Kturb 1.5; // Turbine gain (>0.)
	GGOV1_wfnl 0.2;//0.2; // No load fuel flow, p.u
	GGOV1_Tb 0.01;//0.1; // Turbine lag time constant, sec. (>0.)
	GGOV1_Tc 0.0; // Turbine lead time constant, sec.
	GGOV1_Fuel_lag 1; // Switch for fuel source characteristic, = 0 for fuel flow independent of speed, = 1 fuel flow proportional to speed
	GGOV1_Teng 0.0; // Transport lag time constant for diesel engine
	GGOV1_Tfload 3.0; // Load Limiter time constant, sec. (>0.)
	GGOV1_Kpload 2.0; // Load limiter proportional gain for PI controller
	GGOV1_Kiload 0.67; // Load limiter integral gain for PI controller
	GGOV1_Ldref 1.0; // Load limiter reference value p.u.
	GGOV1_Dm 0.0; // Speed sensitivity coefficient, p.u.
	GGOV1_ropen 050; // Maximum valve opening rate, p.u./sec.
	GGOV1_rclose -050; // Minimum valve closing rate, p.u./sec.
	GGOV1_Kimw 0.0;//0.002; // Power controller (reset) gain
	GGOV1_Pmwset 3.0; // Power controller setpoint, MW
	GGOV1_aset 0.01; // Acceleration limiter setpoint, p.u./sec.
	GGOV1_Ka 10.0; // Acceleration limiter Gain
	GGOV1_Ta 0.1; // Acceleration limiter time constant, sec. (>0.)
	GGOV1_db 0.0; // Speed governor dead band
	GGOV1_Tsa 4.0; // Temperature detection lead time constant, sec.
	GGOV1_Tsb 5.0; // Temperature detection lag time constant, sec.


}


// DG #4 /////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
object diesel_dg {
	flags DELTAMODE;
	name Gen4;
	parent node_300;
	Rated_V 4156; //Line-to-Line value
	Rated_VA 600000;//3500000; // Defaults to 10 MVA
	overload_limit 1.00;
	power_out_A 50000+16667j;
	power_out_B 50000+16667j;
	power_out_C 50000+16667j;
	Gen_type DYN_SYNCHRONOUS;
	rotor_speed_convergence ${rotor_convergence};
	inertia 0.553286;
	damping 0.0;
	Ra .006743;
	Ta 0.062;
	Xl 0.074;
	Xd 1.69;
	Xq 1.084;
	Xdp 0.143;
	Xqp 0.2232003883;
	Xdpp 0.117;
	Xqpp 0.159;
	Tdop 1.648986;
	Tqop 0.448458;
	Tdopp 0.013013;
	Tqopp 0.018817;
	
	SEXS_mode Q_V_DROOP;
	SEXS_Q_V_droop 0.05;
	TA 0.01;
	TB 0.03;
	TC 0.07;	
    KA 45;
    Vset 1.0;

	Governor_type GGOV1;
	
    // Properties:
	GGOV1_R 0.03; // Permanent droop, p.u.
	GGOV1_Rselect 1; // Feedback signal for droop, = 1 selected electrical power, = 0 none (isochronous governor), = -1 fuel valve stroke ( true stroke),= -2 governor output ( requested stroke)
	
	GGOV1_Tpelec 1.0; // Electrical power transducer time constant, sec. (>0.)
	GGOV1_maxerr 0.05;//0.05; // Maximum value for speed error signal
	GGOV1_minerr -0.05;//-0.05; // Minimum value for speed error signal
	GGOV1_Kpgov 2.5;// 0.8; // Governor proportional gain
	GGOV1_Kigov 6.0;// 0.2; // Governor integral gain
	GGOV1_Kdgov 0.0; // Governor derivative gain
	GGOV1_Tdgov 1.0; // Governor derivative controller time constant, sec.
	GGOV1_vmax 1.0;//1.0; // Maximum valve position limit
	GGOV1_vmin 0.15; // Minimum valve position limit
	GGOV1_Tact 0.05;//0.5; // Actuator time constant
	GGOV1_Kturb 1.5; // Turbine gain (>0.)
	GGOV1_wfnl 0.2;//0.2; // No load fuel flow, p.u
	GGOV1_Tb 0.01;//0.1; // Turbine lag time constant, sec. (>0.)
	GGOV1_Tc 0.0; // Turbine lead time constant, sec.
	GGOV1_Fuel_lag 1; // Switch for fuel source characteristic, = 0 for fuel flow independent of speed, = 1 fuel flow proportional to speed
	GGOV1_Teng 0.0; // Transport lag time constant for diesel engine
	GGOV1_Tfload 3.0; // Load Limiter time constant, sec. (>0.)
	GGOV1_Kpload 2.0; // Load limiter proportional gain for PI controller
	GGOV1_Kiload 0.67; // Load limiter integral gain for PI controller
	GGOV1_Ldref 1.0; // Load limiter reference value p.u.
	GGOV1_Dm 0.0; // Speed sensitivity coefficient, p.u.
	GGOV1_ropen 050; // Maximum valve opening rate, p.u./sec.
	GGOV1_rclose -050; // Minimum valve closing rate, p.u./sec.
	GGOV1_Kimw 0.0;//0.002; // Power controller (reset) gain
	GGOV1_Pmwset 3.0; // Power controller setpoint, MW
	GGOV1_aset 0.01; // Acceleration limiter setpoint, p.u./sec.
	GGOV1_Ka 10.0; // Acceleration limiter Gain
	GGOV1_Ta 0.1; // Acceleration limiter time constant, sec. (>0.)
	GGOV1_db 0.0; // Speed governor dead band
	GGOV1_Tsa 4.0; // Temperature detection lead time constant, sec.
	GGOV1_Tsb 5.0; // Temperature detection lag time constant, sec. 


}


//////////////////////////////////// Inverter #1 M1 GFL/////////////////////////////////////////

object inverter_dyn {
	name trip_shad_inv1;
	parent load_42;
	flags DELTAMODE;
	rated_power 600 kW;	
	control_mode GFL_CURRENT_SOURCE;
	grid_following_mode POSITIVE_SEQUENCE;	
	
	frequency_watt false;  // Disable the frequency support function
	volt_var false;  // Disable the voltage support function

	// Grid following values
	Pref 450000;
	Qref 0.0;
	
	kpPLL  50;  // proportional gain of PLL
	kiPLL  900;  // Integral gain of PLL
	
	// Frequency Watt
	Tpf 0.50;   // time constant of the power loop, second
	Tff 0.01;  // time constant of the frequency measurement filter, second
	Rp 0.05;  // frequency-watt droop  5%
	
	// Volt-VAR
	Rq 0.05; // volt-var droop 5%
	Tqf 0.2; // time constant of the reactive power loop, second
	Tvf 0.05; // time constat of the voltage measurement loop, second
	
	//enable_1547_checks true;
	//IEEE_1547_version NONE;//IEEE1547A; 
	//reconnect_time 300 s;	//Set for testing - I don't want to wait 5 minutes

	
	//1547-2018 defaults for triggering - so people can change them - will get adjusted to 1547 in init, if desired
	//over_freq_high_cutout  62.0;	//OF2 set point for IEEE 1547-2018
	//over_freq_high_disconnect_time  0.16;		//OF2 clearing time for IEEE1547-2018

	//over_freq_low_cutout  61.2;		//OF1 set point for IEEE 1547-2018
	//over_freq_low_disconnect_time  300.0;			//OF1 clearing time for IEEE 1547-2018

	//under_freq_high_cutout  58.5;	//UF2 set point for IEEE 1547-2018
	//under_freq_high_disconnect_time  300.0;		//UF2 clearing time for IEEE1547-2018

	//under_freq_low_cutout  56.5;		//UF1 set point for IEEE 1547-2018
	//under_freq_low_disconnect_time  0.16;		//UF1 clearing time for IEEE 1547-2018
	
	
	//Voltage set points - 1547a defaults
	//under_voltage_low_cutout  0.45;	//Lowest voltage threshold for undervoltage
	//under_voltage_middle_cutout  0.60;	//Middle-lowest voltage threshold for undervoltage
	//under_voltage_high_cutout  0.88;		//High value of low voltage threshold for undervoltage
	//over_voltage_low_cutout  1.10;				//Lowest voltage value for overvoltage
	//over_voltage_high_cutout  1.20;				//High voltage value for overvoltage
	//under_voltage_low_disconnect_time  0.16;				//Lowest voltage clearing time for undervoltage
	//under_voltage_middle_disconnect_time  1.0;				//Middle-lowest voltage clearing time for undervoltage
	//under_voltage_high_disconnect_time  2.0;					//Highest voltage clearing time for undervoltage
	//over_voltage_low_disconnect_time  1.0;					//Lowest voltage clearing time for overvoltage
	//over_voltage_high_disconnect_time  0.16;					//Highest voltage clearing time for overvoltage


};


//////////////////////////////////// Inverter #1 M2 GFL/////////////////////////////////////////


object inverter_dyn {
	name trip_shad_inv2;
	parent node_101;
	flags DELTAMODE;
	rated_power 180 kW;	
	control_mode GFL_CURRENT_SOURCE;
	grid_following_mode POSITIVE_SEQUENCE;	
	
	frequency_watt false;  // Disable the frequency support function
	volt_var false;  // Disable the voltage support function

	// Grid following values
	Pref 126000;
	Qref 0.0;
	
	kpPLL  50;  // proportional gain of PLL
	kiPLL  900;  // Integral gain of PLL
	
	// Frequency Watt
	Tpf 0.50;   // time constant of the power loop, second
	Tff 0.01;  // time constant of the frequency measurement filter, second
	Rp 0.05;  // frequency-watt droop  5%
	
	// Volt-VAR
	Rq 0.05; // volt-var droop 5%
	Tqf 0.2; // time constant of the reactive power loop, second
	Tvf 0.05; // time constat of the voltage measurement loop, second
	
	//enable_1547_checks true;
	//IEEE_1547_version NONE;//IEEE1547A; 
	//reconnect_time 300 s;	//Set for testing - I don't want to wait 5 minutes
	
	
	//1547-2018 defaults for triggering - so people can change them - will get adjusted to 1547 in init, if desired
	//over_freq_high_cutout  62.0;	//OF2 set point for IEEE 1547-2018
	//over_freq_high_disconnect_time  0.16;		//OF2 clearing time for IEEE1547-2018

	//over_freq_low_cutout  61.2;		//OF1 set point for IEEE 1547-2018
	//over_freq_low_disconnect_time  300.0;			//OF1 clearing time for IEEE 1547-2018

	//under_freq_high_cutout  58.5;	//UF2 set point for IEEE 1547-2018
	//under_freq_high_disconnect_time  300.0;		//UF2 clearing time for IEEE1547-2018

	//under_freq_low_cutout  56.5;		//UF1 set point for IEEE 1547-2018
	//under_freq_low_disconnect_time  0.16;		//UF1 clearing time for IEEE 1547-2018
	
	
	//Voltage set points - 1547a defaults
	//under_voltage_low_cutout  0.45;	//Lowest voltage threshold for undervoltage
	//under_voltage_middle_cutout  0.60;	//Middle-lowest voltage threshold for undervoltage
	//under_voltage_high_cutout  0.88;		//High value of low voltage threshold for undervoltage
	//over_voltage_low_cutout  1.10;				//Lowest voltage value for overvoltage
	//over_voltage_high_cutout  1.20;				//High voltage value for overvoltage
	//under_voltage_low_disconnect_time  0.16;				//Lowest voltage clearing time for undervoltage
	//under_voltage_middle_disconnect_time  1.0;				//Middle-lowest voltage clearing time for undervoltage
	//under_voltage_high_disconnect_time  2.0;					//Highest voltage clearing time for undervoltage
	//over_voltage_low_disconnect_time  1.0;					//Lowest voltage clearing time for overvoltage
	//over_voltage_high_disconnect_time  0.16;					//Highest voltage clearing time for overvoltage

};


//////////////////////////////////// Inverter #1 M3 GFL /////////////////////////////////////////


object inverter_dyn {
	name trip_shad_inv3;
	parent load_761;
	rated_power 120 kW;	
	flags DELTAMODE;
	control_mode GFL_CURRENT_SOURCE;
	grid_following_mode POSITIVE_SEQUENCE;	
	
	frequency_watt false;  // Disable the frequency support function
	volt_var false;  // Disable the voltage support function

	// Grid following values
	Pref 84000;
	Qref 0.0;
	
	kpPLL  50;  // proportional gain of PLL
	kiPLL  900;  // Integral gain of PLL
	
	// Frequency Watt
	Tpf 0.50;   // time constant of the power loop, second
	Tff 0.01;  // time constant of the frequency measurement filter, second
	Rp 0.05;  // frequency-watt droop  5%
	
	// Volt-VAR
	Rq 0.05; // volt-var droop 5%
	Tqf 0.2; // time constant of the reactive power loop, second
	Tvf 0.05; // time constat of the voltage measurement loop, second
	
	//enable_1547_checks true;
	//IEEE_1547_version NONE; 
	//reconnect_time 300 s;	//Set for testing - I don't want to wait 5 minutes
	

	//1547-2018 defaults for triggering - so people can change them - will get adjusted to 1547 in init, if desired
	//over_freq_high_cutout  62.0;	//OF2 set point for IEEE 1547-2018
	//over_freq_high_disconnect_time  0.16;		//OF2 clearing time for IEEE1547-2018

	//over_freq_low_cutout  61.2;		//OF1 set point for IEEE 1547-2018
	//over_freq_low_disconnect_time  300.0;			//OF1 clearing time for IEEE 1547-2018

	//under_freq_high_cutout  58.5;	//UF2 set point for IEEE 1547-2018
	//under_freq_high_disconnect_time  300.0;		//UF2 clearing time for IEEE1547-2018

	//under_freq_low_cutout  56.5;		//UF1 set point for IEEE 1547-2018
	//under_freq_low_disconnect_time  0.16;		//UF1 clearing time for IEEE 1547-2018
	
	
	//Voltage set points - 1547a defaults
	//under_voltage_low_cutout  0.45;	//Lowest voltage threshold for undervoltage
	//under_voltage_middle_cutout  0.60;	//Middle-lowest voltage threshold for undervoltage
	//under_voltage_high_cutout  0.88;		//High value of low voltage threshold for undervoltage
	//over_voltage_low_cutout  1.10;				//Lowest voltage value for overvoltage
	//over_voltage_high_cutout  1.20;				//High voltage value for overvoltage
	//under_voltage_low_disconnect_time  0.16;				//Lowest voltage clearing time for undervoltage
	//under_voltage_middle_disconnect_time  1.0;				//Middle-lowest voltage clearing time for undervoltage
	//under_voltage_high_disconnect_time  2.0;					//Highest voltage clearing time for undervoltage
	//over_voltage_low_disconnect_time  1.0;					//Lowest voltage clearing time for overvoltage
	//over_voltage_high_disconnect_time  0.16;					//Highest voltage clearing time for overvoltage

};

//////////////////////////////////// Inverter #2 M1 GFM /////////////////////////////////////////


object inverter_dyn {
	name trip_shad_inv4;
	parent load_51;
	flags DELTAMODE;
	rated_power 400 kW;	
	control_mode GRID_FORMING;//FL_CURRENT_SOURCE;
	

	Pref 210000;
	Qref 0.0;
	
	Rfilter 0.0025;
	Xfilter 0.05;
	
	mp 3.77;  // 3.77 represents 1% droop.
    kppmax 10;
	kipmax 20;
	Pmax 1.2;
	Pmin 0;
	
	mq 0.05; // 0.05 represents 5% droop
};

//////////////////////////////////// Inverter #2 M2 GFM /////////////////////////////////////////


object inverter_dyn {
	name trip_shad_inv5;
	parent node_105;
	flags DELTAMODE;
	rated_power 600 kW;	
	control_mode GRID_FORMING;//FL_CURRENT_SOURCE;
	

	Pref 300000;
	Qref 0.0;
	
	Rfilter 0.0025;
	Xfilter 0.05;
	
	mp 3.77;  // 3.77 represents 1% droop.
    kppmax 10;
	kipmax 20;
	Pmax 1.2;
	Pmin 0;
	
	mq 0.05; // 0.05 represents 5% droop
};

//////////////////////////////////// Inverter #2 M3 GFM /////////////////////////////////////////


object inverter_dyn {
	name trip_shad_inv6;
	parent load_80;
	flags DELTAMODE;
	rated_power 100 kW;	
	control_mode GRID_FORMING;//FL_CURRENT_SOURCE;
	

	Pref 70000;
	Qref 0.0;
	
	Rfilter 0.0025;
	Xfilter 0.05;
	
	mp 3.77;  // 3.77 represents 1% droop.
    kppmax 10;
	kipmax 20;
	Pmax 1.2;
	Pmin 0;
	
	mq 0.05; // 0.05 represents 5% droop
};




// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// System Recorders
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

// This player kicks the system into delta mode early so that all transition transients can settle before the scenario transients are triggered
object player {
	name recorder_trigger;
	parent node_150;
	file trigger.player;
	property nominal_voltage;
	flags DELTAMODE;
}

object recorder {
    name recorder_V_node_151;
	parent node_151;
    flags DELTAMODE;
    file "pow/Voltage_151.csv";
    interval 1;
    limit 10000000;
    property voltage_A.real,voltage_A.imag,voltage_B.real,voltage_B.imag,voltage_C.real,voltage_C.imag;
};



// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Diesel Recorders
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
object recorder {
	name recorder_Gen_1;
	parent Gen1;
	property rotor_speed,rotor_angle,flux1d,flux2q,EpRotated,VintRotated,Eint_A,Eint_B,Eint_C,Irotated,pwr_electric.real,pwr_electric.imag,pwr_mech,torque_mech,torque_elec;
	flags DELTAMODE;
	//interval -1;
	interval 1;
	file "gen/Gen_1_Speed.csv";
};


object recorder {
	name recorder_Gen_2;
	parent Gen2;
	property rotor_speed,rotor_angle,flux1d,flux2q,EpRotated,VintRotated,Eint_A,Eint_B,Eint_C,Irotated,pwr_electric.real,pwr_electric.imag,pwr_mech,torque_mech,torque_elec;
	flags DELTAMODE;
	//interval -1;
	interval 1;
	file "gen/Gen_2_Speed.csv";
};
	

object recorder {
	name recorder_Gen_3;
	parent Gen3;
	property rotor_speed,rotor_angle,flux1d,flux2q,EpRotated,VintRotated,Eint_A,Eint_B,Eint_C,Irotated,pwr_electric.real,pwr_electric.imag,pwr_mech,torque_mech,torque_elec;
	flags DELTAMODE;
	//interval -1;
	interval 1;
	file "gen/Gen_3_Speed.csv";
};

object recorder {
	name recorder_Gen_4;
	parent Gen4;
	property rotor_speed,rotor_angle,flux1d,flux2q,EpRotated,VintRotated,Eint_A,Eint_B,Eint_C,Irotated,pwr_electric.real,pwr_electric.imag,pwr_mech,torque_mech,torque_elec;
	flags DELTAMODE;
	//interval -1;
	interval 1;
	file "gen/Gen_4_Speed.csv";
};
	

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Inverter Recorders
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


object recorder {
	name recorder_INV_1;
	parent trip_shad_inv1;
	property VA_Out.real,VA_Out.imag,V_In,VA_Out,Pref,Qref; //,V_In,VA_Out;
	//property VA_Out.real,VA_Out.imag,IEEE_1547_trip_method,Pref,Qref,V_In,VA_Out;
	interval 1;
	flags DELTAMODE;
	file "inverter/Inverter_#1_MG1.csv";
};

object recorder {
	name recorder_test_Vinv1;
	parent load_42;
	property voltage_A, voltage_B, voltage_C; 
        //remove Qref above if issue arrises
	flags DELTAMODE;
	interval 1;
	file "inverter/Inv_1_load_42.csv";
};


object recorder {
	name recorder_INV_2;
	parent trip_shad_inv2;
	property VA_Out.real,VA_Out.imag,Pref,Qref;
	interval 1;
	flags DELTAMODE;
	file "inverter/Inverter_#2_MG1.csv";
};

object recorder {
	name recorder_INV_3;
	parent trip_shad_inv3;
	property VA_Out.real,VA_Out.imag,Pref,Qref;
	interval 1;
	flags DELTAMODE;
	file "inverter/Inverter_#3_MG2.csv";
};

object recorder {
	name recorder_INV_4;
	parent trip_shad_inv4;
	property VA_Out.real,VA_Out.imag,V_In,VA_Out,Pref,Qref;
	interval 1;
	flags DELTAMODE;
	file "inverter/Inverter_#4_MG2.csv";
};



// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Microgrid Freequency Values
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

object recorder {
	name recorder_MG_1_freq;
	parent node_150;
	property "GFA_status,measured_frequency";
	interval 1;
	flags DELTAMODE;
	file "gen/MG_1_GFA_status.csv";
};

object recorder {
	name recorder_MG_2_freq;
	parent load_50;
	property "GFA_status,measured_frequency";
	interval 1;
	flags DELTAMODE;
	file "gen/MG_2_GFA_status.csv";
};

// This will be the same values as the GFA loads at node_101_1 below
object recorder {
	name recorder_MG_3_freq;
	parent load_100; //node_101;
	property "GFA_status,measured_frequency";
	interval 1;
	flags DELTAMODE;
	file "gen/MG_3_GFA_status.csv";
};

object recorder {
        name recorder_MG3_76_freq;
        parent load_76;
        property "GFA_status,measured_frequency";
        interval 1;
        flags DELTAMODE;
        file "gen/MG_3_node_76_freq.csv";
}




// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Switch Recorders
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

 object recorder {
	name recorder_microgrid_switch0;
	parent microgrid_switch0;
	file "switch/microgrid_switch0.csv";
	property phase_A_state,phase_B_state,phase_C_state;
	flags DELTAMODE;
	interval 1;
};

 object recorder {
	name recorder_microgrid_switch1;
	parent microgrid_switch1;
	file "switch/microgrid_switch1.csv";
	property phase_A_state,phase_B_state,phase_C_state,current_in_A, current_in_B, current_in_C;
	flags DELTAMODE;
	interval 1;
};

 object recorder {
	name recorder_microgrid_switch2;
	parent microgrid_switch2;
	file "switch/microgrid_switch2.csv";
	property status,phase_A_state,phase_B_state,phase_C_state,current_out_A;
	flags DELTAMODE;
	interval 1;
};
	
 object recorder {
	name recorder_microgrid_switch3;
	parent microgrid_switch3;
	file "switch/microgrid_switch3.csv";
	property status,phase_A_state,phase_B_state,phase_C_state;
	flags DELTAMODE;
	interval 1;
};

object recorder {
        name recorder_switch_450-451;
        parent switch_450-451;
        file "switch/switch_450-451.csv";
        property status,phase_A_state,phase_B_state,phase_C_state;
        flags DELTAMODE;
        interval 1;
};
	
 object recorder {
	name recorder_microgrid_switch4;
	parent microgrid_switch4;
	file "switch/microgrid_switch4.csv";
	property status,current_out_A,current_out_B,current_out_C,power_out_A,power_out_B,power_out_C,phase_A_state,phase_B_state,phase_C_state;
	flags DELTAMODE;
	interval 1;
	file "switch/Switch_151_300.csv";
};

object recorder {
	name recorder_switch_76-761;
	parent switch_76-761;
	file "switch/switch_76-761.csv";
	property current_out_A,current_out_B,current_out_C, phase_A_state,phase_B_state,phase_C_state;
	flags DELTAMODE;
	interval 1;
};

object recorder {
	name recorder_switch_100-101;
	parent switch_100-101;
	file "switch/switch_100-101.csv";
	property current_out_A,current_out_B,current_out_C, phase_A_state,phase_B_state,phase_C_state;
	flags DELTAMODE;
	interval 1;
};

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Pref Recorders
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


/////////////////////////////////////////////////////////////////////
object recorder {
	name recorder_node150_Pref;
	parent node_150;
	property voltage_A.real,voltage_A.imag,voltage_B.real,voltage_B.imag,voltage_C.real,voltage_C.imag;
	flags DELTAMODE;
	interval 1;
	file "pow/node150_Power.csv";
};


object recorder {
	name recorder_node150_switch;
	parent switch_1491-149;
	property current_out_A.real, current_out_B.real, current_out_C.real;
	flags DELTAMODE;
	interval 1;
	file "switch/node150_switch_Current.csv";
};
////////////////////////////////////////////////////////////////////

object recorder {
	name recorder_Gen2_Pref;
	parent Gen2;
	property Pref;
	flags DELTAMODE;
	interval 1;
	file "gen/Gen2_Pref.csv";
};

object recorder {
	name recorder_Gen3_Pref;
	parent Gen3;
	property Pref;
	flags DELTAMODE;
	interval 1;
	file "gen/Gen3_Pref.csv";
};

object recorder {
	name recorder_Gen4_Pref;
	parent Gen4;
	property Pref;
	flags DELTAMODE;
	interval 1;
	file "gen/Gen4_Pref.csv";
};

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Pref Players
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


object player {
	name Player_Gen2_Pref;
	parent Gen2;
	property Pref;
	flags DELTAMODE;
	file "Gen2_Pref.player";
};



object player {
	name Player_Gen3_Pref;
	parent Gen3;
	property Pref;
	flags DELTAMODE;
	file "Gen3_Pref.player";
};

object player {
	name Player_Gen4_Pref;
	parent Gen4;
	property Pref;
	flags DELTAMODE;
	file "Gen4_Pref.player";
};


// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Sensor recorders
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

// Device 4,5,6
object recorder {
	name recorder_test_V;
	parent load_100;
	property voltage_A, voltage_B, voltage_C;
	flags DELTAMODE;
	interval 1;
	file "load/Load_100_Voltage.csv";
};

object recorder {
	name recorder_load_76;
	parent load_76;
	property voltage_A, voltage_B, voltage_C;
	flags DELTAMODE;
	interval 1;
	file "load/Load_76_Voltage.csv";
};

// Device 4,5,6
object recorder {
	name recorder_test_V1;
	parent node_101;
	property voltage_A, voltage_B, voltage_C;
	flags DELTAMODE;
	interval 1;
	file "load/Load_1001_Voltage.csv";
};

object recorder {
	name recorder_test_C;
	parent OH_line_100-450;
	property current_out_A, current_out_B, current_out_C;
	flags DELTAMODE;
	interval 1;
	file "oh/OH_line_100-450_Current.csv";
};

//object recorder {
//        name recorder_OH_line_76-86;
//        parent OH_line_76-86;
//        property current_out_A, current_out_B, current_out_C;
//        flags DELTAMODE;
//        interval 1;
//        file "oh/OH_line_76-86_Current.csv";
//};

object recorder {
        name recorder_OH_line_76-77;
        parent OH_line_76-77;
        property current_out_A, current_out_B, current_out_C;
        flags DELTAMODE;
        interval 1;
        file "oh/OH_line_76-77_Current.csv";
};

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// Regulator recorders
// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

 object recorder {
	name recorder_regulator_41;
	parent regulator_4;
	file regulator_4.csv;
	property current_in_A, current_in_B, current_in_C;
	flags DELTAMODE;
	interval 1;
};




// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// all the voltages of the node and current for overhead lines for one single timestamp


object currdump {
       filename "pow/output_current.csv";
	   mode POLAR;
       }
	   
object voltdump {
       filename "pow/output_voltage.csv";
	   mode POLAR;
       }	


//Fault check option
object fault_check {
	name base_fault_check_object;
	check_mode ONCHANGE;
	strictly_radial false;
	eventgen_object testgendev0;
	grid_association true;	//Flag to ensure non-monolithic islands
	//output_filename test_connect.txt;
	//full_output_file true;
}

//Manual object - needed to get fault_check to behave properly -- arbitrary item added


// Open SW 18-135 (form island 1)
//object eventgen {
//	 flags DELTAMODE;
//	 name testgendev;
//	 fault_type "SW-ABC";     //Type of fault for the object to induce
//	 manual_outages "microgrid_switch1,2001-08-01 12:10:5.315 PST,2001-08-01 13:00:00.0 PST";
// }   // First time is when the switch will open, the second time is when it will close

object eventgen {
	flags DELTAMODE;
	name testgendev0;
	fault_type "SW-ABC";     //Type of fault for the object to induce
	manual_outages "microgrid_switch0,2001-08-01 12:10:1.001 PST,2001-08-01 13:00:20.001 PST";
}   // First time is when the switch will open, the second time is when it will close


 //Open Switch 18-135 
object eventgen {
	flags DELTAMODE;
	name testgendev1;
	fault_type "SW-ABC";     //Type of fault for the object to induce
	manual_outages "microgrid_switch1,2001-08-01 12:10:1.001 PST,2001-08-01 13:00:5.001 PST";
}   // First time is when the switch will open, the second time is when it will close

// // Open Switch 97-197 
object eventgen {
	flags DELTAMODE;
	name testgendev2;
	fault_type "SW-ABC";     //Type of fault for the object to induce
	manual_outages "microgrid_switch2,2001-08-01 12:10:1.001 PST,2001-08-01 13:00:20.001 PST";
}   // First time is when the switch will open, the second time is when it will close

// // Open Switch 60-160 
object eventgen {
	flags DELTAMODE;
	name testgendev3;
	fault_type "SW-ABC";     //Type of fault for the object to induce
	manual_outages "microgrid_switch3,2001-08-01 12:10:1.001 PST,2001-08-01 13:00:20.001 PST";
}   // First time is when the switch will open, the second time is when it will close

///////////////////////////////////////////////////////////////////////////
// Start of individual objects/////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

//Phase Conductor for 1 thru 8: 336,400 26/7 ACSR
object overhead_line_conductor{
	name overhead_line_conductor_1;
	geometric_mean_radius 0.0244;
	resistance 0.306;
	diameter 0.721;
}

//Phase Conductor for 9 thru 11: 1/0 ACSR
object overhead_line_conductor{
	name overhead_line_conductor_2;
	geometric_mean_radius 0.00446;
	resistance 1.12;
	diameter 0.398;
}	

//Phase Conductor for neutral: 4/0 6/1 ACSR
object overhead_line_conductor{
	name overhead_line_conductor_3;
	geometric_mean_radius 0.00814;
	resistance 0.592;
	diameter 0.563;
}

// Phase Conductor for 12: 1/0 AA,TS
object underground_line_conductor{ 
    name underground_line_conductor_1;
	outer_diameter 1.06;
	conductor_gmr 0.0111;
	conductor_diameter 0.368;
	conductor_resistance 0.97;
	neutral_gmr 0.011100;
	neutral_gmr 0.00208;
	neutral_resistance 14.8722;
	neutral_diameter 0.0640837;
	neutral_strands 16.0;
}

// Overhead line configurations
// ABCN
object line_spacing{
	name line_spacing_1;
	distance_AB 2.5;
	distance_AC 7.0;
	distance_BC 4.5;
	distance_AN 5.656854;
	distance_BN 4.272002;
	distance_CN 5.0;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

// CABN
object line_spacing{
	name line_spacing_2;
	distance_AB 4.5;
	distance_AC 2.5;
	distance_BC 7.0;
	distance_AN 4.27200187266;
	distance_CN 5.65685424949;
	distance_BN 5.0;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

// BCAN
object line_spacing{
	name line_spacing_3;
	distance_AB 7.0;
	distance_AC 4.5;
	distance_BC 2.5;
	distance_AN 5.0;
	distance_BN 5.65685424949;
	distance_CN 4.27200187266;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

// CBAN
object line_spacing{
	name line_spacing_4;
	distance_AB 4.5;
	distance_AC 7.0;
	distance_BC 2.5;
	distance_AN 5.0;
	distance_BN 4.27200187266;
	distance_CN 5.65685424949;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

// BACN
object line_spacing{
	name line_spacing_5;
	distance_AB 2.5;
	distance_AC 4.5;
	distance_BC 7.0;
	distance_CN 5.0;
	distance_AN 4.27200187266;
	distance_BN 5.65685424949;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

// ACBN
object line_spacing{
	name line_spacing_6;
	distance_AB 2.5;
	distance_AC 7.0;
	distance_BC 4.5;
	distance_CN 5.0;
	distance_BN 4.27200187266;
	distance_AN 5.65685424949;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

//ACN
object line_spacing{
	name line_spacing_7;
	distance_AC 7.0;
	distance_AN 5.65685424949;
	distance_CN 5.0;
	distance_AE 28.0;
	distance_CE 28.0;
	distance_NE 24.0;
}

//ABN
object line_spacing{
	name line_spacing_8;
	distance_AB 7.0;
	distance_AN 5.65685424949;
	distance_BN 5.0;
	distance_AE 28.0;
	distance_BE 28.0;
	distance_NE 24.0;
}

//AN
object line_spacing{
	name line_spacing_9;
	distance_AN 5.024937811;
	distance_AE 28.0;
	distance_NE 24.0;
}

//BN
object line_spacing{
	name line_spacing_10;
	distance_BN 5.024937811;
	distance_BE 28.0;
	distance_NE 24.0;
}

//CN
object line_spacing{
	name line_spacing_11;
	distance_CN 5.024937811;
	distance_CE 28.0;
	distance_NE 24.0;
}

//ABC
object line_spacing{
	name line_spacing_12;
	distance_AB 0.5;
	distance_AC 1.0;
	distance_BC 0.5;
}

object line_configuration{
	name line_configuration_1;
	conductor_A overhead_line_conductor_1;
	conductor_B overhead_line_conductor_1;
	conductor_C overhead_line_conductor_1;
	conductor_N overhead_line_conductor_3;
	spacing line_spacing_1;
}

object line_configuration{
	name line_configuration_2;
	conductor_A overhead_line_conductor_1;
	conductor_B overhead_line_conductor_1;
	conductor_C overhead_line_conductor_1;
	conductor_N overhead_line_conductor_3;
	spacing line_spacing_2;
}

object line_configuration{
	name line_configuration_3;
	conductor_A overhead_line_conductor_1;
	conductor_B overhead_line_conductor_1;
	conductor_C overhead_line_conductor_1;
	conductor_N overhead_line_conductor_3;
	spacing line_spacing_3;
}

object line_configuration{
	name line_configuration_4;
	conductor_A overhead_line_conductor_1;
	conductor_B overhead_line_conductor_1;
	conductor_C overhead_line_conductor_1;
	conductor_N overhead_line_conductor_3;
	spacing line_spacing_4;
}

object line_configuration{
	name line_configuration_5;
	conductor_A overhead_line_conductor_1;
	conductor_B overhead_line_conductor_1;
	conductor_C overhead_line_conductor_1;
	conductor_N overhead_line_conductor_3;
	spacing line_spacing_5;
}

object line_configuration{
	name line_configuration_6;
	conductor_A overhead_line_conductor_1;
	conductor_B overhead_line_conductor_1;
	conductor_C overhead_line_conductor_1;
	conductor_N overhead_line_conductor_3;
	spacing line_spacing_6;
}

object line_configuration{
	name line_configuration_7;
	conductor_A overhead_line_conductor_1;
	conductor_C overhead_line_conductor_1;
	conductor_N overhead_line_conductor_3;
	spacing line_spacing_7;
}

object line_configuration{
	name line_configuration_8;
	conductor_A overhead_line_conductor_1;
	conductor_B overhead_line_conductor_1;
	conductor_N overhead_line_conductor_3;
	spacing line_spacing_8;
}

object line_configuration{
	name line_configuration_9;
	conductor_A overhead_line_conductor_2;
	conductor_N overhead_line_conductor_2;
	spacing line_spacing_9;
}

object line_configuration{
	name line_configuration_10;
	conductor_B overhead_line_conductor_1;
	conductor_N overhead_line_conductor_1;
	spacing line_spacing_10;
}

object line_configuration{
	name line_configuration_11;
	conductor_C overhead_line_conductor_1;
	conductor_N overhead_line_conductor_1;
	spacing line_spacing_11;
}

object line_configuration{
	name line_configuration_12;
	 conductor_A underground_line_conductor_1;
	 conductor_B underground_line_conductor_1;
	 conductor_C underground_line_conductor_1;
	 spacing line_spacing_12;
}



//Define line objects 
object overhead_line  {
     name OH_line_1-2;
	 phases "BN";
     from load_1;
     to load_2;
     length 175;
     configuration line_configuration_10;
}

object overhead_line  {
     name OH_line_1-3;
	 phases "CN";
     from load_1;
     to node_3;
     length 250;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_1-7;
	 phases "ABCN";
     from load_1;
     to load_7;
     length 300;
     configuration line_configuration_1;
}
 
object overhead_line  {
     name OH_line_3-4;
	 phases "CN";
     from node_3;
     to load_4;
     length 200;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_3-5;
	 phases "CN";
     from node_3;
     to load_5;
     length 325;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_5-6;
	 phases "CN";
     from load_5;
     to load_6;
     length 250;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_7-8;
	 phases "ABCN";
     from load_7;
     to node_8;
     length 200;
     configuration line_configuration_1;
}
 
object overhead_line  {
     name OH_line_8-12;
	 phases "BN";
     from node_8;
     to load_12;
     length 225;
     configuration line_configuration_10;
}
 
object overhead_line  {
     name OH_line_8-9;
	 phases "AN";
     from node_8;
     to load_9;
     length 225;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_8-13;
	 phases "ABCN";
     from node_8;
     to node_13;
     length 300;
     configuration line_configuration_1;
}
 
 
object overhead_line  {
     name OH_line_13-34;
	 phases "CN";
     from node_13;
     to load_34;
     length 150;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_13-18;
	 phases "ABCN";
     from node_13;
     to node_18;
     length 825;
     configuration line_configuration_2;
}
 
object overhead_line  {
     name OH_line_14-11;
	 phases "AN";
     from node_14;
     to load_11;
     length 250;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_14-10;
	 phases "AN";
     from node_14;
     to load_10;
     length 250;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_15-16;
	 phases "CN";
     from node_15;
     to load_16;
     length 375;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_15-17;
	 phases "CN";
     from node_15;
     to load_17;
     length 350;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_18-19;
	 phases "AN";
     from node_18;
     to load_19;
     length 250;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_18-21;
	 phases "ABCN";
     from node_18;
     to node_21;
     length 300;
     configuration line_configuration_2;
}
 
object overhead_line  {
     name OH_line_19-20;
	 phases "AN";
     from load_19;
     to load_20;
     length 325;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_21-22;
	 phases "BN";
     from node_21;
     to load_22;
     length 525;
     configuration line_configuration_10;
}
 
object overhead_line  {
     name OH_line_21-23;
	 phases "ABCN";
     from node_21;
     to node_23;
     length 250;
     configuration line_configuration_2;
}
 
object overhead_line  {
     name OH_line_23-24;
	 phases "CN";
     from node_23;
     to load_24;
     length 550;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_23-25;
	 phases "ABCN";
     from node_23;
     to node_25;
     length 275;
     configuration line_configuration_2;
}
 
 
object overhead_line  {
     name OH_line_25-28;
	 phases "ABCN";
	 from node_25;
     to load_28;
     length 200;
     configuration line_configuration_2;
}
 
object overhead_line  {
     name OH_line_26-27;
	 phases "ACN";
     from node_26;
     to node_27;
     length 275;
     configuration line_configuration_7;
}
 
object overhead_line  {
     name OH_line_26-31;
	 phases "CN";
     from node_26;
     to load_31;
     length 225;
     configuration line_configuration_11;
}

object overhead_line {
     name OH_line_26-2601;
	 phases "ACN";
     from node_26;
     to node_2501;
     length 350;
     configuration line_configuration_7;
}
 
object overhead_line  {
     name OH_line_27-33;
	 phases "AN";
     from node_27;
     to load_33;
     length 500;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_28-29;
	 phases "ABCN";
     from load_28;
     to load_29;
     length 300;
     configuration line_configuration_2;
}
 
object overhead_line  {
     name OH_line_29-30;
	 phases "ABCN";
     from load_29;
     to load_30;
     length 350;
     configuration line_configuration_2;
}
 
object overhead_line  {
     name OH_line_30-250;
	 phases "ABCN";
     from load_30;
     to node_250;
     length 200;
     configuration line_configuration_2;
}
 
object overhead_line  {
     name OH_line_31-32;
	 phases "CN";
     from load_31;
     to load_32;
     length 300;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_34-15;
	 phases "CN";
     from load_34;
     to node_15;
     length 100;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_35-36;
	 phases "ABN";
     from load_35;
     to node_36;
     length 650;
     configuration line_configuration_8;
}
 
object overhead_line  {
     name OH_line_35-40;
	 phases "ABCN";
     from load_35;
     to node_40;
     length 250;
     configuration line_configuration_1;
}
 
object overhead_line  {
     name OH_line_36-37;
	 phases "AN";
     from node_36;
     to load_37;
     length 300;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_36-38;
	 phases "BN";
     from node_36;
     to load_38;
     length 250;
     configuration line_configuration_10;
}
 
object overhead_line  {
     name OH_line_38-39;
	 phases "BN";
     from load_38;
     to load_39;
     length 325;
     configuration line_configuration_10;
}
 
object overhead_line  {
     name OH_line_40-41;
	 phases "CN";
     from node_40;
     to load_41;
     length 325;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_40-42;
	 phases "ABCN";
     from node_40;
     to load_42;
     length 250;
     configuration line_configuration_1;
}
 
object overhead_line  {
     name OH_line_42-43;
	 phases "BN";
     from load_42;
     to load_43;
     length 500;
     configuration line_configuration_10;
}
 
object overhead_line  {
     name OH_line_42-44;
	 phases "ABCN";
     from load_42;
     to node_44;
     length 200;
     configuration line_configuration_1;
}
 
object overhead_line  {
     name OH_line_44-45;
	 phases "AN";
     from node_44;
     to load_45;
     length 200;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_44-47;
	 phases "ABCN";
     from node_44;
     to load_47;
     length 250;
     configuration line_configuration_1;
}
 
object overhead_line  {
     name OH_line_45-46;
	 phases "AN";
     from load_45;
     to load_46;
     length 300;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_47-48;
	 phases "ABCN";
     from load_47;
     to load_48;
     length 150;
     configuration line_configuration_4;
}
 
object overhead_line  {
     name OH_line_47-49;
	 phases "ABCN";
     from load_47;
     to load_49;
     length 250;
     configuration line_configuration_4;
}
 
object overhead_line  {
     name OH_line_49-50;
	 phases "ABCN";
     from load_49;
     to load_50;
     length 250;
     configuration line_configuration_4;
}
 
object overhead_line  {
     name OH_line_50-51;
	 phases "ABCN";
     from load_50;
     to load_51;
     length 250;
     configuration line_configuration_4;
}

object overhead_line  {
     name OH_line_51-151;
	 phases "ABCN";			//undefined line segment
     from load_51;
     to node_151;
     length 700;
     configuration line_configuration_4;
}
 
object overhead_line  {
     name OH_line_52-53;
	 phases "ABCN";
     from load_52;
     to load_53;
     length 200;
     configuration line_configuration_1;
}
 
object overhead_line  {
     name OH_line_53-54;
	 phases "ABCN";
     from load_53;
     to node_54;
     length 125;
     configuration line_configuration_1;
}
 
object overhead_line  {
     name OH_line_54-55;
	 phases "ABCN";
     from node_54;
     to load_55;
     length 275;
     configuration line_configuration_1;
}
 
object overhead_line  {
     name OH_line_54-57;
	 phases "ABCN";
     from node_54;
     to node_57;
     length 350;
     configuration line_configuration_3;
}
 
object overhead_line  {
     name OH_line_55-56;
	 phases "ABCN";
     from load_55;
     to load_56;
     length 275;
     configuration line_configuration_1;
}
 
object overhead_line  {
     name OH_line_57-58;
	 phases "BN";
     from node_57;
     to load_58;
     length 250;
     configuration line_configuration_10;
}
 
object overhead_line  {
     name OH_line_57-60;
	 phases "ABCN";
     from node_57;
     to load_60;
     length 750;
     configuration line_configuration_3;
}
 
object overhead_line  {
     name OH_line_58-59;
	 phases "BN";
     from load_58;
     to load_59;
     length 250;
     configuration line_configuration_10;
}
 
object overhead_line  {
     name OH_line_60-61;
	 phases "ABCN";
     from load_60;
     to node_61;
     length 550;
     configuration line_configuration_5;
}
 
object underground_line  {
     name OH_line_60-62;
	 phases "ABC";
     from load_60;
     to load_62;
     length 250;
     configuration line_configuration_12;
}
 
object underground_line  {
     name OH_line_62-63;
	 phases "ABC";
     from load_62;
     to load_63;
     length 175;
     configuration line_configuration_12;
}
 
object underground_line  {
     name OH_line_63-64;
	 phases "ABC";
     from load_63;
     to load_64;
     length 350;
     configuration line_configuration_12;
}
 
object underground_line  {
     name OH_line_64-65;
	 phases "ABC";
     from load_64;
     to load_65;
     length 425;
     configuration line_configuration_12;
}
 
object underground_line  {
     name OH_line_65-66;
	 phases "ABC";
     from load_65;
     to load_66;
     length 325;
     configuration line_configuration_12;
}
 
object overhead_line  {
     name OH_line_67-68;
	 phases "AN";
     from node_67;
     to load_68;
     length 200;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_67-72;
	 phases "ABCN";
     from node_67;
     to node_72;
     length 275;
     configuration line_configuration_3;
}

 
object overhead_line  {
     name OH_line_67-97;
	 phases "ABCN";
     from node_67;
     to node_97;
     length 250;
     configuration line_configuration_3;
}
 
object overhead_line  {
     name OH_line_68-69;
	 phases "AN";
     from load_68;
     to load_69;
     length 275;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_69-70;
	 phases "AN";
     from load_69;
     to load_70;
     length 325;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_70-71;
	 phases "AN";
     from load_70;
     to load_71;
     length 275;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_72-73;
	 phases "CN";
     from node_72;
     to load_73;
     length 275;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_72-76;
	 phases "ABCN";
     from node_72;
     to load_76;
     length 200;
     configuration line_configuration_3;
}
 
object overhead_line  {
     name OH_line_73-74;
	 phases "CN";
     from load_73;
     to load_74;
     length 350;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_74-75;
	 phases "CN";
     from load_74;
     to load_75;
     length 400;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_76-77;
	 phases "ABCN";
     from load_76;
     to load_77;
     length 400;
     configuration line_configuration_6;
}
 
//object overhead_line  {
//     name OH_line_76-86;
//	 phases "ABCN";
//     from load_76;
//     to load_86;
//     length 700;
//     configuration line_configuration_3;
//}
 
object overhead_line  {
     name OH_line_77-78;
	 phases "ABCN";
     from load_77;
     to node_78;
     length 100;
     configuration line_configuration_6;
}
 
object overhead_line  {
     name OH_line_78-79;
	 phases "ABCN";
     from node_78;
     to load_79;
     length 225;
     configuration line_configuration_6;
}
 
object overhead_line  {
     name OH_line_78-80;
	 phases "ABCN";
     from node_78;
     to load_80;
     length 475;
     configuration line_configuration_6;
}
 
object overhead_line  {
     name OH_line_80-81;
     phases "ABCN";
     // phases "CN";
     from load_80;
     to node_81;
     length 475;
     configuration line_configuration_6;
}
 
object overhead_line  {
     name OH_line_81-82;
     // phases "ABCN";
     phases "CN";
     from node_81;
     to load_82;
     length 250;
     configuration line_configuration_6;
}
 
object overhead_line  {
     name OH_line_81-84;
     phases "CN";
     from node_81;
     to load_84;
     length 675;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_82-83;
     // phases "ABCN";
     phases "CN";
     from load_82;
     to load_83;
     length 250;
     configuration line_configuration_6;
}
 
object overhead_line  {
     name OH_line_84-85;
	 phases "CN";
     from load_84;
     to load_85;
     length 475;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_86-87;
	 phases "ABCN";
     from load_86;
     to load_87;
     length 450;
     configuration line_configuration_6;
}
 
object overhead_line  {
     name OH_line_87-88;
	 phases "AN";
     from load_87;
     to load_88;
     length 175;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_87-89;
	 phases "ABCN";
     from load_87;
     to node_89;
     length 275;
     configuration line_configuration_6;
}
 
object overhead_line  {
     name OH_line_89-90;
	 phases "BN";
     from node_89;
     to load_90;
     length 225;
     configuration line_configuration_10;
}
 
object overhead_line  {
     name OH_line_89-91;
	 phases "ABCN";
     from node_89;
     to node_91;
     length 225;
     configuration line_configuration_6;
}
 
object overhead_line  {
     name OH_line_91-92;
	 phases "CN";
     from node_91;
     to load_92;
     length 300;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_91-93;
	 phases "ABCN";
     from node_91;
     to node_93;
     length 225;
     configuration line_configuration_6;
}
 
object overhead_line  {
     name OH_line_93-94;
	 phases "AN";
     from node_93;
     to load_94;
     length 275;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_93-95;
	 phases "ABCN";
     from node_93;
     to load_95;
     length 300;
     configuration line_configuration_6;
}
 
object overhead_line  {
     name OH_line_95-96;
	 phases "BN";
     from load_95;
     to load_96;
     length 200;
     configuration line_configuration_10;
}
 
object overhead_line  {
     name OH_line_97-98;
	 phases "ABCN";
     from node_97;
     to load_98;
     length 275;
     configuration line_configuration_3;
}
 
object overhead_line  {
     name OH_line_98-99;
	 phases "ABCN";
     from load_98;
     to load_99;
     length 550;
     configuration line_configuration_3;
}
 
object overhead_line  {
     name OH_line_99-100;
	 phases "ABCN";
     from load_99;
     to load_100;
     length 300;
     configuration line_configuration_3;
}
 
object overhead_line  {
     name OH_line_100-450;
	 phases "ABCN";
     from load_100;
     to node_450;
     length 800;
     configuration line_configuration_3;
}
 
object overhead_line  {
     name OH_line_101-102;
	 phases "CN";
     from node_101;
     to load_102;
     length 225;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_101-105;
	 phases "ABCN";
     from node_101;
     to node_105;
     length 275;
     configuration line_configuration_3;
}
 
object overhead_line  {
     name OH_line_102-103;
	 phases "CN";
     from load_102;
     to load_103;
     length 325;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_103-104;
	 phases "CN";
     from load_103;
     to load_104;
     length 700;
     configuration line_configuration_11;
}
 
object overhead_line  {
     name OH_line_105-106;
	 phases "BN";
     from node_105;
     to load_106;
     length 225;
     configuration line_configuration_10;
}
 
object overhead_line  {
     name OH_line_105-108;
	 phases "ABCN";
     from node_105;
     to node_108;
     length 325;
     configuration line_configuration_3;
}
 
object overhead_line  {
     name OH_line_106-107;
	 phases "BN";
     from load_106;
     to load_107;
     length 575;
     configuration line_configuration_10;
}
 
object overhead_line  {
     name OH_line_108-109;
	 phases "AN";
     from node_108;
     to load_109;
     length 450;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_108-300;
	 phases "ABCN";
     from node_108;
     to node_300;
     length 1000;
     configuration line_configuration_3;
}
 
object overhead_line  {
     name OH_line_109-110;
	 phases "AN";
     from load_109;
     to node_110;
     length 300;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_110-111;
	 phases "AN";
     from node_110;
     to load_111;
     length 575;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_110-112;
	 phases "AN";
     from node_110;
     to load_112;
     length 125;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_112-113;
	 phases "AN";
     from load_112;
     to load_113;
     length 525;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_113-114;
	 phases "AN";
     from load_113;
     to load_114;
     length 325;
     configuration line_configuration_9;
}
 
object overhead_line  {
     name OH_line_135-35;
	 phases "ABCN";
     from node_135;
     to load_35;
     length 375;
     configuration line_configuration_4;
}
 
object overhead_line  {
     name OH_line_149-1;
	 phases "ABCN";
     from node_149;
     to load_1;
     length 400;
     configuration line_configuration_1;
}
 
object overhead_line  {
     name OH_line_152-52;
	 phases "ABCN";
     from node_152;
     to load_52;
     length 400;
     configuration line_configuration_1;
}
 

object overhead_line  {
     name OH_line_197-101;
	 phases "ABCN";
     from node_197;
     to node_101;
     length 250;
     configuration line_configuration_3;
}

object overhead_line {
     name OH_line_1401-14;
	 phases "AN";
     from node_1401;
     to node_14;
     length 425;
     configuration line_configuration_9;
}

object overhead_line {
     name OH_line_6701-67;
	 phases "ABCN";
     from node_6701;
     to node_67;
     length 350;
     configuration line_configuration_6;
}



//Create node only objects 
object node {
     name node_3;
	 phases "CN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
 
object node {
     name node_8;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 

 
object node {
     name node_13;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}

 
object node {
     name node_14;
	 phases "AN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}

 
object node {
     name node_15;
	 phases "CN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
 
object node {
     name node_18;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
 
object node {
     name node_21;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 

 
object node {
     name node_23;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
 
object node {
     name node_25;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}

object node {
     name node_2501;
	 phases "ACN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_26;
	 phases "ACN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_27;
	 phases "ACN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 

 
object node {
     name node_36;
	 phases "ABN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 

 
object node {
     name node_40;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 

 
object node {
     name node_44;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
 
object node {
     name node_54;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;

}
 

 
object node {
     name node_57;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;

}
 
 
object node {
     name node_61;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;

}
 

 
object node {
     name node_67;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;

}


 

 
object node {
     name node_72;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;

}



object node {
     name node_78;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;

}
 

 
object node {
     name node_81;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;

}
 


 
object node {
     name node_89;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;

}
 

 
object node {
     name node_91;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;

}
 

 
object node {
     name node_93;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;

}
 

 
object node {
     name node_97;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;

}
 

object node {
     name node_101;
	 phases "ABCN";
     flags DELTAMODE;
	 frequency_measure_type PLL;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_105;
	 phases "ABCN";
     flags DELTAMODE;
	 frequency_measure_type PLL;
     nominal_voltage 2401.7771;

}
 
object node {
     name node_108;
	 phases "ABCN";
	 flags DELTAMODE;
	 frequency_measure_type PLL;
     nominal_voltage 2401.7771;
}
 

 
object node {
     name node_110;
	 phases "AN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
 
object node {
     name node_135;
	 phases "ABCN";
     flags DELTAMODE;
	 frequency_measure_type PLL;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_149;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}

object node {
     name node_1491;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}

object node {
     name node_150;
	 phases "ABCN";
	 frequency_measure_type PLL;
     bustype SWING_PQ;
     flags DELTAMODE;
	 nominal_voltage 2401.7771;
     //voltage_A 2401.7771;
	 //voltage_B -1200.8886-2080.000j;
	 //voltage_C -1200.8886+2080.000j;
	 
}

object node {
    phases "ABCN";
    name node_1501;
    bustype SWING;
    flags DELTAMODE;
    nominal_voltage 2401.7771;

}
 
object node {
     name node_151;
	 phases "ABCN";
     flags DELTAMODE;
	 frequency_measure_type PLL;
     nominal_voltage 2401.7771;
}

object node {
     name node_152;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_160;
	 phases "ABCN";
     flags DELTAMODE;
     frequency_measure_type PLL;
     nominal_voltage 2401.7771;
}
 
object node {
	 name node_195;
     phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_197;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_250;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_251;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_300;
	 phases "ABCN";
	 bustype SWING_PQ;
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_350;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_450;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_451;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}
 
object node {
     name node_610;
	 phases "ABCN";
     nominal_voltage 480.000;
}

object node {
     name node_611;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}

object node {
     name node_1401;
	 phases "AN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}

object node{
     name node_6701;
	 phases "ABCN";
     flags DELTAMODE;
     nominal_voltage 2401.7771;
}

//object node {
//   name node_761;
//   phases "AN";
//   flags DELTAMODE;
//   nominal_voltage 2401.7771;
//}

object node {
    name node_1001;
    phases "ABCN";
    flags DELTAMODE;
    nominal_voltage 2401.7771;
}

//Create load objects
object load {
     name load_1;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;

}
 
object load {
     name load_2;
     phases "BN";
     flags DELTAMODE;
     constant_power_B 20000+10000j;
     nominal_voltage 2401.7771;

}
 
object load {
     name load_4;
     phases "CN";
     flags DELTAMODE;
	 constant_power_C 40000+20000j;
     nominal_voltage 2401.7771;


}
 
object load {
     name load_5;
     phases "CN";
     flags DELTAMODE;
     constant_current_C -0.55781+9.2933j;
     nominal_voltage 2401.7771;

     
}
 
object load {
     name load_6;
     phases "CN";
     flags DELTAMODE;
     constant_impedance_C 115.3707+57.6853j;
     nominal_voltage 2401.7771;


}
 
object load {
     name load_7;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_A 20000+10000j;
     nominal_voltage 2401.7771;

}
 
object load {
     name load_9;
     phases "AN";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_10;
     phases "AN";
     flags DELTAMODE;
     constant_current_A 8.3272-4.1636j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_11;
     phases "AN";
     flags DELTAMODE;
     constant_impedance_A 115.3707+57.6853j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_12;
     phases "BN";
     flags DELTAMODE;
     constant_power_B 20000+10000j;
     nominal_voltage 2401.7771;

}
 
object load {
     name load_16;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_17;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 20000+10000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_19;
     phases "AN";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_20;
     phases "AN";
     flags DELTAMODE;
     constant_current_A 16.6543-8.3272j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_22;
     phases "BN";
     flags DELTAMODE;
     constant_impedance_B 115.3707+57.6853j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_24;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_28;
     phases "ABCN";
     flags DELTAMODE;
     constant_current_A 16.6543-8.3272j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_29;
     phases "ABCN";
     flags DELTAMODE;
     constant_impedance_A 115.3707+57.6853j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_30;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_C 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_31;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 20000+10000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_32;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 20000+10000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_33;
     phases "AN";
     flags DELTAMODE;
     constant_current_A 16.6543-8.3272j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_34;
     phases "CN";
     flags DELTAMODE;
     constant_impedance_C 115.3707+57.6853j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_35;
     phases "ABCD";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_37;
     phases "AN";
     flags DELTAMODE;
     constant_impedance_A 115.3707+57.6853j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_38;
     phases "BN";
     flags DELTAMODE;
     constant_current_B -7.7694-5.1297j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_39;
     phases "BN";
     flags DELTAMODE;
     constant_power_B 20000+10000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_41;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 20000+10000j;
     nominal_voltage 2401.7771;
}
 
 
object load {
     name load_42;
     phases "ABCN";
     flags DELTAMODE;
	 //frequency_measure_type PLL;
     constant_power_A 20000+10000j;
     nominal_voltage 2401.7771;

}
 
object load {
     name load_43;
     phases "BN";
     flags DELTAMODE;
     constant_impedance_B 115.3707+57.6853j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_45;
     phases "AN";
     flags DELTAMODE;
     constant_current_A 8.3272-4.1636j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_46;
     phases "AN";
     flags DELTAMODE;
     constant_power_A 20000+10000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_47;
     phases "ABCN";
     flags DELTAMODE;
     constant_current_A 14.5725-10.409j;
     constant_current_B -16.3007-7.4157j;
     constant_current_C 1.7282+17.8247j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_48;
     phases "ABCN";
     flags DELTAMODE;
     constant_impedance_A 54.5672+38.9766j;
     constant_impedance_B 54.5672+38.9766j;
     constant_impedance_C 54.5672+38.9766j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_49;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_A 35000+25000j;
     constant_power_B 70000+50000j;
     constant_power_C 35000+25000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_50;
     phases "ABCN";
     flags DELTAMODE;
	 bustype SWING_PQ;
	 frequency_measure_type PLL;
     constant_power_C 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_51;
     phases "ABCN";
     flags DELTAMODE;
	 frequency_measure_type PLL;
     constant_power_A 20000+10000j;
     nominal_voltage 2401.7771;

}
 
object load {
     name load_52;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_53;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_55;
     phases "ABCN";
     flags DELTAMODE;
     constant_impedance_A 230.7413+115.3707j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_56;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_B 20000+10000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_58;
     phases "BN";
     flags DELTAMODE;
     constant_current_B -7.7694-5.1297j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_59;
     phases "BN";
     flags DELTAMODE;
     constant_power_B 20000+10000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_60;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_A 20000+10000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_62;
     phases "ABC";
     flags DELTAMODE;
     constant_impedance_C 115.3707+57.6853j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_63;
     phases "ABC";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_64;
     phases "ABC";
     flags DELTAMODE;
     constant_current_B -28.2336-19.757j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_65;
     phases "ABCD";
     flags DELTAMODE;
     constant_impedance_A 327.4032+233.8595j;
     constant_impedance_B 327.4032+233.8595j;
     constant_impedance_C 163.7016+116.9297j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_66;
     phases "ABC";
     flags DELTAMODE;
     constant_power_C 75000+35000j;
     nominal_voltage 2401.7771;
}

 
object load {
     name load_68;
     phases "AN";
     flags DELTAMODE;
     constant_power_A 20000+10000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_69;
     phases "AN";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_70;
     phases "AN";
     flags DELTAMODE;
     constant_power_A 20000+10000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_71;
     phases "AN";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_73;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 40000+20000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_74;
     phases "CN";
     flags DELTAMODE;
     constant_impedance_C 115.3707+57.6853j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_75;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 40000+20000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_76;
     phases "ABCD";
     flags DELTAMODE;
     // frequency_measure_type PLL;
     constant_current_A 31.4742-4.0341j;
     constant_current_B -12.0192-16.8269j;
     constant_current_C -8.5629+18.8224j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
     GFA_enable true;
     GFA_freq_low_trip 55 Hz;
     GFA_freq_high_trip 65 Hz;
}

object load {
    name load_761;
    phases "ABCD";
    flags DELTAMODE;
    // frequency_measure_type PLL;
     constant_power_A 20000+10000j;
     nominal_voltage 2401.7771;  
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_77;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_B 40000+20000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_79;
     phases "ABCN";
     flags DELTAMODE;
     constant_impedance_A 115.3707+57.6853j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_80;
     phases "ABCN";
     //phases "CN";
     flags DELTAMODE;
     // constant_power_B 20000+10000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 58 Hz;
    GFA_freq_high_trip 70 Hz;
}
 
object load {
     name load_82;
     //phases "ABCN";
     phases "CN";
     flags DELTAMODE;
     //constant_power_A 10000+5000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 58 Hz;
    GFA_freq_high_trip 70 Hz;
}
 
object load {
     name load_83;
     //phases "ABCN";
     phases "CN";
     flags DELTAMODE;
     // constant_power_C 20000+10000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 58 Hz;
    GFA_freq_high_trip 70 Hz;
}
 
object load {
     name load_84;
     phases "CN";
     flags DELTAMODE;
     // constant_power_C 20000+10000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_85;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 40000+20000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_86;
     phases "ABCN";
	 flags DELTAMODE;
     constant_power_B 20000+10000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_87;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_B 40000+20000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_88;
     phases "AN";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_90;
     phases "BN";
     flags DELTAMODE;
     constant_current_B -15.5387-10.2595j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_92;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 40000+20000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_94;
     phases "AN";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_95;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_B 20000+10000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_96;
     phases "BN";
     flags DELTAMODE;
     constant_power_B 20000+10000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_98;
     phases "ABCN";
     flags DELTAMODE;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_99;
     phases "ABCN";
     constant_power_B 40000+20000j;
     flags DELTAMODE;
     nominal_voltage 2401.7771;
     frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load { //diesel_dg connected to this load 
     name load_100;
     phases "ABCN";
     flags DELTAMODE;
     bustype SWING_PQ;
     constant_power_A 10.0000-5.0000j;
     constant_power_C 10.0000-5.0000j;
     constant_power_B 10.0000-5.0000j;
     constant_impedance_C 115.3707+57.6853j;
     nominal_voltage 2401.7771;
       //--GFA--
    frequency_measure_type PLL;
    GFA_enable true;
    GFA_freq_low_trip 55 Hz;
    GFA_freq_high_trip 65 Hz;
}
 
object load {
     name load_102;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 20000+10000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_103;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_104;
     phases "CN";
     flags DELTAMODE;
     constant_power_C 40000+20000j;
     nominal_voltage 2401.7771;
}

object load {
     name load_106;
     phases "BN";
     flags DELTAMODE;
	 frequency_measure_type PLL;
     constant_power_B 40000+20000j;
     nominal_voltage 2401.7771;
	 
	
}
 
object load {
     name load_107;
     phases "BN";
     flags DELTAMODE;
	 frequency_measure_type PLL;
     constant_power_B 40000+20000j;
     nominal_voltage 2401.7771;
	
}
 
object load {
     name load_109;
     phases "AN";
     flags DELTAMODE;
	 frequency_measure_type PLL;
     constant_power_A 40000+20000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_111;
     phases "AN";
     flags DELTAMODE;
	 frequency_measure_type PLL;
     constant_power_A 20000+10000j;
     nominal_voltage 2401.7771;
}
 
object load {
     name load_112;
     phases "AN";
	 frequency_measure_type PLL;
     flags DELTAMODE;
     constant_current_A 8.3272-4.1636j;
     nominal_voltage 2401.7771;
	 
}
 
object load {
     name load_113;
     phases "AN";
	 frequency_measure_type PLL;
     flags DELTAMODE;
     constant_impedance_A 115.3707+57.6853j;
     nominal_voltage 2401.7771;

}
 
object load {
     name load_114;
     phases "AN";
     flags DELTAMODE;
     constant_power_A 20000+10000j;
     nominal_voltage 2401.7771;
}

// Switches

// Isolation of the swing node
object switch {
     name microgrid_switch0;
	 phases "ABCN";
     from node_150;
     to node_1501;
     status CLOSED;

}

object switch {
     name switch_76-86;
     phases "ABCN";
     from load_76;
     to load_86;
     status CLOSED;
}

object switch {
     name switch_76-761;
	 phases "ABCN";
     from load_76;
     to load_761;
     status CLOSED;
}


// Connection between microgrid 1 and microgrid 2
object switch {
     name microgrid_switch1;
	 phases "ABCN";
     from node_18;
     to node_135;
     status CLOSED;

}
// Connection between microgrid 3 and Region 3
object switch {
     name microgrid_switch2;
	 phases "ABCN";
     from node_97;
     to node_197;
     status CLOSED;
     //operating_mode BANKED;
     

}
//object player {
//	name Player_Switch_Status;
//	parent microgrid_switch2;
//	property status;
//	flags DELTAMODE;
//	file "Switch_Status.player";
//};
// Isolation for Region 4
object switch {
     name microgrid_switch3;
	 phases "ABCN";
     from load_60;
     to node_160;
     status CLOSED;
	 
		 
}// COnnection between microgid 2 and 3

object switch {
     name microgrid_switch4;
	 phases "ABCN";
     from node_151;
     to node_300;
     status CLOSED;//OPEN;

}

object switch {
     name switch_13-152;
	 phases "ABCN";
     from node_13;
     to node_152;
     status CLOSED;
}



object switch {
     name switch_61-611;
	 phases "ABCN";
     from node_61;
     to node_611;
     status CLOSED;
}



object switch {
     name switch_1491-149;
	 phases "ABCN";
     from node_1491;
     to node_149;
     status CLOSED;
}

object switch {
     name switch_250-251;
	 phases "ABCN";
     from node_250;
     to node_251;
     status CLOSED;
}

object switch {
     name switch_450-451;
	 phases "ABCN";
     from node_450;
     to node_451;
     status CLOSED;
}

object switch {
     name switch_54-94;
	 phases "AN";
     from node_54;
     to load_94;
     status OPEN;
}


object switch {
     name switch_300-350;
	 phases "ABCN";
     from node_300;
     to node_350;
     status CLOSED;
}

object switch {
     name switch_95-195;
	 phases "ABCN";
     from load_95;
     to node_195;
     status CLOSED;
}

object switch {
    name switch_100-101;
    phases "ABCN";
    from load_100;
    to node_1001;
    status CLOSED;
}



// Transformer
object transformer_configuration {
	name transformer_configuration_1;
	connect_type DELTA_DELTA;
  	install_type PADMOUNT;
  	power_rating 150 kVA;
  	primary_voltage 4160;
  	secondary_voltage 480;
  	resistance 0.0127;
  	reactance 0.0272;
}
  
object transformer {
  	name transformer_611-610;
	phases "ABCN";
  	from node_611;
  	to node_610;
  	configuration transformer_configuration_1;
}

// Capacitors
object capacitor{
	name cap_83;
	parent load_83;
	//phases ABC;
        phases CN;
	phases_connected ABC;
	nominal_voltage 2401.7771;
	control MANUAL;
	capacitor_A 200000.00; //200000.00; //600000.00;
	capacitor_B 200000.00; //200000.00; //600000.00;
	capacitor_C 200000.00; //200000.00; //600000.00;
	switchA CLOSED;
	switchB CLOSED;
	switchC CLOSED;
	
};

object capacitor{
	name cap_88;
	parent load_88;
	phases A;
	phases_connected A;
	nominal_voltage 2401.7771;
	control MANUAL;
	capacitor_A 50000.00; //50000.00; //100000.00;
	switchA CLOSED;
};

object capacitor{
	name cap_90;
	parent load_90;
	phases B;
	phases_connected B;
	nominal_voltage 2401.7771;
	control MANUAL;
	capacitor_B 50000.00; //50000; //100000.00;
	switchB CLOSED;
};

object capacitor{
	name cap_92;
	parent load_92;
	phases C;
	phases_connected C;
	nominal_voltage 2401.7771;
	control MANUAL;
	capacitor_C 50000.00;
	switchC CLOSED;
};

// Regulators
object regulator_configuration {
	name regulator_configuration_1;
	connect_type 1;
	band_center 120.000;
	band_width 2.0;
	time_delay 30.0;
	raise_taps 16;
	lower_taps 16;
	current_transducer_ratio 700;
	power_transducer_ratio 20;
	compensator_r_setting_A 3.0;
	compensator_x_setting_A 7.5;
	compensator_r_setting_B 3.0;
	compensator_x_setting_B 7.5;
	compensator_r_setting_C 3.0;
	compensator_x_setting_C 7.5;
	CT_phase "ABC";
	PT_phase "ABC";
	regulation 0.10;
	Control MANUAL;
	Type A;
	tap_pos_A 7;
	tap_pos_B 7;
	tap_pos_C 7;
}
  
object regulator {
	 name regulator_1;
	 phases "ABC";
	 from node_150;
	 to node_1491;
	 configuration regulator_configuration_1;
}


object regulator_configuration {
	name regulator_configuration_2;
	connect_type 1;
	band_center 120.000;
	band_width 1.0;
	time_delay 30.0;
	raise_taps 16;
	lower_taps 16;
	current_transducer_ratio 50;
	power_transducer_ratio 20;
	compensator_r_setting_A 0.4;
	compensator_x_setting_A 0.4;
	compensator_r_setting_C 0.4;
	compensator_x_setting_C 0.4;
	CT_phase "AC";
	PT_phase "AC";
	regulation 0.10;
	Control MANUAL;
	Type A;
	tap_pos_A 0;
	tap_pos_C -1;
}
  
object regulator {
	 name regulator_2;
	 phases "AC";
	 from node_25;
	 to node_2501;
	 configuration regulator_configuration_2;
}


object regulator_configuration {
	name regulator_configuration_3;
	connect_type 1;
	band_center 120.000;
	band_width 2.0;
	time_delay 30.0;
	raise_taps 16;
	lower_taps 16;
	current_transducer_ratio 50;
	power_transducer_ratio 20;
	compensator_r_setting_A 0.4;
	compensator_x_setting_A 0.4;
	CT_phase "A";
	PT_phase "A";
	regulation 0.10;
	Control MANUAL;
	Type A;
	tap_pos_A -1;
}
  
object regulator {
	 name regulator_3;
	 phases "A";
	 from load_9;
	 to node_1401;
	 configuration regulator_configuration_3;
}

object regulator_configuration {
	name regulator_configuration_4;
	connect_type 1;
	band_center 124.000;
	band_width 2.0;
	time_delay 30.0;
	raise_taps 16;
	lower_taps 16;
	current_transducer_ratio 300;
	power_transducer_ratio 20;
	compensator_r_setting_A 0.6;
	compensator_r_setting_B 1.4;
	compensator_r_setting_C 0.2;
	compensator_x_setting_A 1.3;
	compensator_x_setting_B 2.6;
	compensator_x_setting_C 1.4;
	CT_phase "ABC";
	PT_phase "ABC";
	regulation 0.10;
	Control MANUAL;
	Type A;
	tap_pos_A 8;
	tap_pos_B 1;
	tap_pos_C 5;
}
  
object regulator {
	 name regulator_4;
	 phases "ABC";
	 from node_160;
	 to node_6701;
	 configuration regulator_configuration_4;
}

   
